searchState.loadedDescShard("canopy", 0, "A library for building terminal UIs.\nBinder provides an ergonomic way to specify a set of key …\nThe API exposed to nodes by Canopy.\nContains the error value\nWas an event handled or ignored?\nA trait that allows widgets to perform recursive …\nNo result was generated on node traversal\nNodes are the basic building-blocks of a Canopy UI. They …\nA unique ID for a node.\nA node name, which consists of lowercase ASCII …\nAn opaque structure that Canopy uses to track node state. …\nContains the success value\nThe interface used to render to the screen. It is only …\nA Root node that lives at the base of a Canopy app. It …\nThe interface implemented by all nodes that track state.\nDerive an implementation of the StatefulNode trait for a …\nA ViewPort manages the size of a node and its projection …\nAttempt to focus this node. If the node accepts focus, it …\nAttempt to focus this node. If the node accepts focus, it …\nShow the inspector.\nLoad the commands from a command node using the default …\nBind a key in the global mode, with a given path filter to …\nBind a key within a given mode, with a given path filter …\nBind a mouse action in a specified mode with a given path …\nBind a mouse action in the global mode with a given path …\nThe canvas on which children are positioned, and to which …\nCall a closure on this node’s children. If any child …\nCall a closure on this node’s children. If any child …\nMark a method as a command. This macro should be used to …\nConstrain this viewport so that its screen rectangle falls …\nTakes a string and munges it into a valid node name. It …\nCalled for each node on the focus path, after each render …\nCalled for each node on the focus path, after each render …\nAdd the default bindings for a widget.\nDerive an implementation of the <code>CommandNode</code> trait. This …\nStop the render backend and exit the process.\nStop the render backend and exit the process.\nFill a rectangle with a specified character.\nSet the node size and the target view size at the same …\nIf we’re currently focused in the inspector, shift focus …\nGet the Rect of the screen area that currently has focus.\nFind the area of the current terminal focus node under the …\nMove focus in a specified direction within the subtree at …\nMove focus in a specified direction within the subtree at …\nMove focus downward of the currently focused node within …\nMove focus downward of the currently focused node within …\nShift focus down.\nFocus the first node that accepts focus in the pre-order …\nFocus the first node that accepts focus in the pre-order …\nMove focus to the left of the currently focused node …\nMove focus to the left of the currently focused node …\nShift focus left.\nFocus the next node in the pre-order traversal of root. If …\nFocus the next node in the pre-order traversal of root. If …\nFocus the next node in a pre-order traversal of the app.\nReturn the focus path for the subtree under <code>root</code>.\nReturn the focus path for the subtree under <code>root</code>.\nFocus the previous node in the pre-order traversal of <code>root</code>…\nFocus the previous node in the pre-order traversal of <code>root</code>…\nFocus the next node in a pre-order traversal of the app.\nMove focus to  right of the currently focused node within …\nMove focus to  right of the currently focused node within …\nShift focus right.\nMove focus upward of the currently focused node within the …\nMove focus upward of the currently focused node within the …\nShift focus up.\nForce the node to render in the next sweep. Over-riding …\nForce the node to render in the next sweep. Over-riding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculates the (pre, active, post) rectangles needed to …\nHandle a key input event. This event is only called for …\nHandle a key input event. This event is only called for …\nHandle a mouse input event. The default implementation …\nHandle a mouse input event. The default implementation …\nHides the element and all its descendants from rendering. …\nHides the element and all its descendants from rendering. …\nHide the inspector.\nA unique ID for this node.\nA unique ID for this node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDoes the node have focus?\nDoes the node have terminal focus?\nIs this element hidden?\nIs this element hidden?\nHas this node been initialized? That is, has its poll …\nHas this node been initialized? That is, has its poll …\nIs the specified node on the focus path? A node is on the …\nIs the specified node on the focus path? A node is on the …\nBind a key to a script, panicing if there is any error …\nHelper functions for <code>Node::layout</code> implementations.\nRe-compute the size and view of the node if it had to be …\nRe-compute the size and view of the node if it had to be …\nGiven a rectangle within our outer, calculate the …\nBind a mouse action to a script, panicing if there is any …\nThe name of this node, used for debugging and command …\nDoes the node need to render in the next sweep? This …\nDoes the node need to render in the next sweep? This …\nCreate a new View with the given outer and inner …\nHas the focus path status of this node changed since the …\nScroll the view down by the height of the view rectangle.\nScroll the view down by the height of the view rectangle.\nScroll the view up by the height of the view rectangle.\nScroll the view up by the height of the view rectangle.\nThe scheduled poll endpoint. This function is called for …\nThe scheduled poll endpoint. This function is called for …\nThe location of the node in the parent’s canvas. Must …\nOutput a formatted table of commands to a writer.\nProject a line in virtual space to the screen. Returns an …\nProject a point in virtual space to the screen. If the …\nProject a rect in virtual space to the screen. If the …\nExit from the program, restoring terminal state. If the …\nRender this widget. The render method should:\nRender this widget. The render method should:\nAbsolute rectangle for the screen region the node is being …\nScroll the view by the given offsets. The view rectangle …\nScroll the view by the given offsets. The view rectangle …\nScroll the view down by one line.\nScroll the view down by one line.\nScroll the view left by one line.\nScroll the view left by one line.\nScroll the view right by one line.\nScroll the view right by one line.\nScroll the view right by one line.\nScroll the view to the specified position. The view is …\nScroll the view to the specified position. The view is …\nScroll the view up by one line.\nScroll the view up by one line.\nSet the screen, view and outer rects all to the same size. …\nFocus a node.\nFocus a node.\nDraw a solid frame\nStart the backend renderer.\nStart the backend renderer.\nGet a reference to the node’s state object.\nGet a mutable reference to the node’s state object.\nStop the backend renderer, releasing control of the …\nStop the backend renderer, releasing control of the …\nTaint a node to signal that it should be re-rendered.\nTaint a node for render.\nTaint the entire subtree under a node.\nMark a tree of nodes for render.\nPrint text in the specified line. If the text is wider …\nShow the inspector.\nUtilities for working with a Canopy node tree.\nBind a key to a script fallibly.\nBind a mouse action to a script fallibly.\nHides the element\nHides the element\nTake a rectangle on the physical screen, and calculate the …\nCalculates the (pre, active, post) rectangles needed to …\nThe portion of this node that is displayed - a …\nGet the node’s <code>ViewPort</code>.\nGet the node’s <code>ViewPort</code>.\nStart with the inspector open.\nSet the mode for subsequent bindings.\nSet the path filter for subsequent bindings.\nA handle for controlling our rendering back-end. The …\nStop the render backend and exit the process.\nStart the backend renderer.\nStop the backend renderer, releasing control of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle to a vector that contains the result of the …\nA render backend for testing, which logs render outcomes.\nCreate returns a <code>TestBuf</code> protected by a mutex, and a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA parsed command invocation.\nThe CommandNode trait is implemented by all Nodes to …\nCommandDefinition encapsulates the definition of a command …\nThe return type of a command.\nThe return type of a command.\nNo return value.\nArguments to the command.\nThe name of the command.\nThe name of the command.\nReturn a list of commands for this node.\nDispatch a command relative to a node. This searches the …\nDispatch a command to this node.\nA doc string taken from the method comment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA full command name, of the form nodename.command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the node.\nThe name of the node.\nIs the return wrapped in a <code>Result</code>? That is, is the method …\nThe return type of the command.\nWhat is the ultimate type of the return?\nShould the cursor blink?\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocation of the cursor, relative to the node’s origin.\nShape of the cursor.\nThis module contains the core primitives to represent …\nShift + Tab key.\nA character.\nF key.\nFast-forward media key.\nIso Level3 Shift key.\nIso Level5 Shift key.\nA keystroke along with modifiers.\nLeft Alt key.\nLeft Control key.\nLeft Hyper key.\nLeft Meta key.\nLeft Shift key.\nLeft Super key.\nLower-volume media key.\nMute media key.\nPause media key.\nPlay media key.\nPlay/Pause media key.\nRaise-volume media key.\nRecord media key.\nReverse media key.\nRewind media key.\nRight Alt key.\nRight Control key.\nRight Hyper key.\nRight Meta key.\nRight Shift key.\nRight Super key.\nStop media key.\nNext-track media key.\nPrevious-track media key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandling of the shift key is the most intricate part of …\nAn abstract specification for a mouse action\nA mouse input event. This has the same fields as the <code>Mouse</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a button-driven action?\nCoverage accumulates <code>Rect</code>s that have been drawn and …\nAn <code>Expanse</code> is a rectangle that has a width and height but …\nA frame extracted from a rectangle\nA horizontal line, one character high - essentially a Rect …\nAn exctent is a directionless one-dimensional line segment.\nA rectangle\nAre these two line segments adjacent but non-overlapping?\nAdd a rectangle to the cover set. Rects and portions of …\nThe area of this expanse.\nThe width times the height of the rectangle\nReturn a rect with the same size, with the top left at the …\nThe bottom of the frame, not including corners\nThe bottom left corner\nThe bottom right corner\nCarve off a fixed-size portion from the end of this …\nCarve a rectangle with a fixed width out of the end of the …\nCarve a rectangle with a fixed width out of the start of …\nCarve off a fixed-size portion from the start of this …\nCarve a rectangle with a fixed height out of the end of …\nCarve a rectangle with a fixed height out of the start of …\nClamp a point, constraining it to fall within <code>rect</code>.\nClamp this rectangle, shifting it to lie within another …\nTrue if this Size can completely enclose the target size …\nDoes other lie completely within this extent.\nDoes this rectangle contain the point?\nDoes this rectangle completely enclose the other? If other …\nConstructs a zero-valued size.\nConstructs a zero-valued size.\nReturn a line segment that encloses this line segment and …\nReturn the <code>Expanse</code> of this rectangle, which has the same …\nThe far limit of the extent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight\nThe horizontal extent of this rect.\nExtract a horizontal section of this rect based on an …\nExtracts an inner rectangle, given a border width. If the …\nCalculate the intersection of this rectangle and another.\nReturn the intersection between this line segment and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDoes this rect have a zero size?\nThe left of the frame, not including corners\nThe length of this extent.\nConstruct a new frame. If the rect is too small to fit the …\nThe offset of this extent.\nGiven a point that falls within this rectangle, shift the …\nGiven a rectangle contained within this rectangle, shift …\nReturn a <code>Rect</code> with the same dimensions as the <code>Expanse</code>, but …\nThe right of the frame, not including corners\nShift the point by an offset, avoiding under- or overflow.\nLike scroll, but constrained within a rectangle.\nSearches in a given direction sweeping to and fro. Stops …\nSweeps downwards from the bottom of the rectangle. Stops …\nSweeps leftwards the left of the rectangle. Stops once the …\nSweeps rightwards from the right of the rectangle. Stops …\nSweeps upwards from the top of the rectangle. Stops once …\nA safe function for shifting the rectangle by an offset, …\nShift this rectangle, constrained to be within another …\nSplit this extent into (pre, active, post) extents, based …\nSplits the rectangle horizontally into n sections, as …\nSplits the rectangle into columns, with each column split …\nSplits the rectangle vertically into n sections, as close …\nSubtract a rectangle from this one, returning a set of …\nTop-left corner\nThe top of the frame, not including corners\nThe top left corner\nThe top right corner\nReturn a set of <code>Line</code>s that represent the un-covered …\nThe vertical extent of this rect.\nExtract a slice of this rect based on a vertical extent.\nWidth\nCreat a zero-sized <code>Rect</code> at the origin.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPlace a node in a given sub-rectangle of a parent’s view.\nAdjust a child node so that it fits a viewport. This lays …\nFrame a single child node. First, we calculate the inner …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPlace a child in a given sub-rectangle of a parent’s …\nWrap a single child node, mirroring the child’s size and …\nA match expression that can be applied to paths.\nCheck whether the path filter matches a given path. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPop an item off the end of the path, modifying it in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn ANSI color. See 256 colors - cheat sheet for more info.\nA text attribute.\nA set of active text attributes.\nA resolved style specification.\nA hierarchical style manager.\nAdd a style at a specified path.\nInsert a style attribute at a specified path.\nInsert a background color at a specified path.\nInsert a foreground color at a specified path.\nConstruct an empty set of text attributes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nResolve a style path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this attribute set empty?\nConstruct a set of text attributes with a single attribute …\nPush onto the layer stack with the current render level.\nA helper for progressive construction of attribute sets.\nContinue walking, but don’t mark the event as handled.\nHandle an event with a possible return value and stop …\nSkip this node and continue walking. The meaning of Skip …\nWalk is the return value from traversal closures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDid the traversal return Continue?\nDid the traversal return Handle?\nCalls a closure on the root node under (x, y), then …\nFind the ID of the leaf node at a given point.\nReturn the node path for a specified node id, relative to …\nA postorder traversal of the nodes under e.\nWalk::Skip prunes all children of the current node from …\nThe handle value of the traversal, if any.\nCall a closure on the currently focused node and all its …\nCall a closure on the node with the specified <code>id</code>, and all …\nA single input line, one character high.\nPanes manages a set of child nodes arranged in a 2d grid.\nDelete the focus node. If a column ends up empty, it is …\nGet the offset of the current focus in the children vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a node in a new column. If we have a focused node, …\nInsert a node, splitting vertically. If we have a focused …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a fixed width, ignoring fit parameters\nA characgter position. Offset 0 is the first character in …\nA simple editor\nAn insert position. The offset 0 is before the first …\nA position that can be clamped within the bounds of a <code>State</code>…\nA window of wrapped lines, represented as a line offset …\nAdjust the window to include the cursor.\nThe offset of the chunk in the editor state.\nThe offset of the chunk in the editor state.\nRetrieve the chunk and offset of the cursor.\nConstrain within state bounds, and return a new item\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this cursor between wrapped lines?\nCreate a new item and clamp it\nCreate a new InsertPos and constrain it within the state.\nCreate a new CharPos and constrain it within the state.\nThe column offset within the chunk.\nThe column offset within the chunk.\nShift the cursor by an offset within a chunk. If the new …\nShift the cursor by an offset within a chunk. If the new …\nShift the chunk offset. If the new position is out of …\nShift the chunk offset. If the new position is out of …\nThe editor Core exposes the operations that can be …\nMove the cursor within the current chunk, moving to the …\nMove the up or down in the chunk list.\nMove the up or down along wrapped lines.\nDelete text in a given range.\nReturns the argument unchanged.\nInsert text at the current cursor position.\nCalls <code>U::from(self)</code>.\nRedo an operation. Returne true if an operation was …\nUndo an operation. Return true if an operation was undone, …\nDouble line Unicode box drawing frame set\nA frame around an element.\nDefines the set of glyphs used to draw the frame\nSingle line thin Unicode box drawing frame set\nSingle line thick Unicode box drawing frame set\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild a frame with a specified glyph set\nBuild a frame with a specified title\nManage and display a list of items.\nListItem must be implemented by items displayed in a <code>List</code>.\nAppend an item to the end of the list.\nClear all items.\nMove selection to the next item in the list, if possible.\nDelete the currently selected item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert an item at the given index.\nInsert an item after the current selection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of items in the list.\nThe number of items in the list.\nScroll the viewport down by one page.\nScroll the viewport up by one page.\nScroll the viewport down by one line.\nScroll the viewport left by one column.\nScroll the viewport right by one column.\nScroll the viewport up by one line.\nSelect an item at a specified offset, clamping the offset …\nMove selection to the next item in the list, if possible.\nMove selection to the next item in the list, if possible.\nMove selection to the next item in the list, if possible.\nMove selection to the next previous the list, if possible.\nThe current selected item, if any\nA tab control managing a set of nodes with titles.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSelect the next tab.\nSelect the previous tab.")