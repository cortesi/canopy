searchState.loadedDescShard("geom", 0, "Contains the error value\nAn <code>Expanse</code> is a rectangle that has a width and height but …\nA frame extracted from a rectangle\nA horizontal line, one character high - essentially a Rect …\nAn exctent is a directionless one-dimensional line segment.\nContains the success value\nA rectangle\nAre these two line segments adjacent but non-overlapping?\nThe area of this expanse.\nThe width times the height of the rectangle\nReturn a rect with the same size, with the top left at the …\nThe bottom of the frame, not including corners\nThe bottom left corner\nThe bottom right corner\nCarve off a fixed-size portion from the end of this …\nCarve a rectangle with a fixed width out of the end of the …\nCarve a rectangle with a fixed width out of the start of …\nCarve off a fixed-size portion from the start of this …\nCarve a rectangle with a fixed height out of the end of …\nCarve a rectangle with a fixed height out of the start of …\nClamp a point, constraining it to fall within <code>rect</code>.\nClamp this rectangle, shifting it to lie within another …\nTrue if this Size can completely enclose the target size …\nDoes other lie completely within this extent.\nDoes this rectangle contain the point?\nDoes this rectangle completely enclose the other? If other …\nConstructs a zero-valued size.\nConstructs a zero-valued size.\nReturn a line segment that encloses this line segment and …\nReturn the <code>Expanse</code> of this rectangle, which has the same …\nThe far limit of the extent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight\nThe horizontal extent of this rect.\nExtract a horizontal section of this rect based on an …\nGet the inner rect of the frame (the space inside the …\nExtracts an inner rectangle, given a border width. If the …\nCalculate the intersection of this rectangle and another.\nReturn the intersection between this line segment and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDoes this rect have a zero size?\nThe left of the frame, not including corners\nThe length of this extent.\nConstruct a new frame. If the rect is too small to fit the …\nThe offset of this extent.\nGet the outer rect of the frame (the original rect passed …\nGiven a point that falls within this rectangle, shift the …\nGiven a rectangle contained within this rectangle, shift …\nReturn a <code>Rect</code> with the same dimensions as the <code>Expanse</code>, but …\nThe right of the frame, not including corners\nShift the point by an offset, avoiding under- or overflow.\nLike scroll, but constrained within a rectangle.\nSearches in a given direction sweeping to and fro. Stops …\nSweeps downwards from the bottom of the rectangle. Stops …\nSweeps leftwards the left of the rectangle. Stops once the …\nSweeps rightwards from the right of the rectangle. Stops …\nSweeps upwards from the top of the rectangle. Stops once …\nA safe function for shifting the rectangle by an offset, …\nShift this rectangle, constrained to be within another …\nSplit this extent into (pre, active, post) extents, based …\nSplits the rectangle horizontally into n sections, as …\nSplits the rectangle into columns, with each column split …\nSplits the rectangle vertically into n sections, as close …\nSubtract a rectangle from this one, returning a set of …\nTop-left corner\nThe top of the frame, not including corners\nThe top left corner\nThe top right corner\nThe vertical extent of this rect.\nExtract a slice of this rect based on a vertical extent.\nWidth\nCreat a zero-sized <code>Rect</code> at the origin.")